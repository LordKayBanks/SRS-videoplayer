[{"/Users/kaybanks/Repository/videoplayer/src/App.js":"1","/Users/kaybanks/Repository/videoplayer/src/index.js":"2","/Users/kaybanks/Repository/videoplayer/src/components/playlist.js":"3","/Users/kaybanks/Repository/videoplayer/src/components/SortingOption.js":"4","/Users/kaybanks/Repository/videoplayer/src/components/toolbar.js":"5","/Users/kaybanks/Repository/videoplayer/src/utility/playlistCreator.js":"6","/Users/kaybanks/Repository/videoplayer/src/utility/Duration.js":"7","/Users/kaybanks/Repository/videoplayer/src/components/volume.js":"8","/Users/kaybanks/Repository/videoplayer/src/utility/index.js":"9","/Users/kaybanks/Repository/videoplayer/src/components/buttons.js":"10","/Users/kaybanks/Repository/videoplayer/src/player/drag.js":"11","/Users/kaybanks/Repository/videoplayer/src/utility/startup.js":"12","/Users/kaybanks/Repository/videoplayer/src/utility/youtube.js":"13","/Users/kaybanks/Repository/videoplayer/src/player/notify.js":"14","/Users/kaybanks/Repository/videoplayer/src/utility/seedData.js":"15","/Users/kaybanks/Repository/videoplayer/src/components/playlistItem.js":"16"},{"size":29718,"mtime":1633791213999,"results":"17","hashOfConfig":"18"},{"size":475,"mtime":1633781903258,"results":"19","hashOfConfig":"18"},{"size":8146,"mtime":1633780640861,"results":"20","hashOfConfig":"18"},{"size":1078,"mtime":1633741103547,"results":"21","hashOfConfig":"18"},{"size":2410,"mtime":1633785604146,"results":"22","hashOfConfig":"18"},{"size":1551,"mtime":1633741928817,"results":"23","hashOfConfig":"18"},{"size":523,"mtime":1633468050927,"results":"24","hashOfConfig":"18"},{"size":340,"mtime":1633441844422,"results":"25","hashOfConfig":"18"},{"size":8542,"mtime":1633730960896,"results":"26","hashOfConfig":"18"},{"size":6010,"mtime":1633788036794,"results":"27","hashOfConfig":"18"},{"size":2281,"mtime":1633543023689,"results":"28","hashOfConfig":"18"},{"size":714,"mtime":1633488184587,"results":"29","hashOfConfig":"18"},{"size":1665,"mtime":1633581258720,"results":"30","hashOfConfig":"18"},{"size":1412,"mtime":1633582479473,"results":"31","hashOfConfig":"18"},{"size":18382,"mtime":1633746953710,"results":"32","hashOfConfig":"18"},{"size":2022,"mtime":1633791071402,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"149wjm3",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kaybanks/Repository/videoplayer/src/App.js",["74","75"],"import './App.css'\n\nimport React, { Component } from 'react'\nimport {\n    convertToNearest30,\n    convertToNearestX,\n    getVideoSplitFactor,\n    toMinutesSeconds\n} from './utility/index'\nimport ReactNotification, { store } from 'react-notifications-component'\nimport 'react-notifications-component/dist/theme.css'\n\nimport ReactPlayer from 'react-player'\nimport Toolbar from './components/toolbar'\nimport { findDOMNode } from 'react-dom'\nimport { hot } from 'react-hot-loader'\nimport screenfull from 'screenfull'\n\nclass App extends Component {\n    state = {\n        // url: 'https://www.youtube.com/watch?v=oUFJJNQGwhk',\n        url: null,\n        pip: false,\n        playing: true,\n        controls: true,\n        light: false,\n        volume: 1,\n        muted: true,\n        played: 0,\n        loaded: 0,\n        duration: 0,\n        currentTime: 0,\n        playbackRate: 10,\n        loop: false,\n        //  ======================\n        // message: { colorMessage: '', mainMessage: '' },\n        playlist: [],\n        repeatMode: 'repeat-one',\n        currentlyPlaying: '',\n        title: '',\n        videoFormat: '',\n        reviewModeSate: false,\n        reviewRangeStart: 0,\n        reviewRangeEnd: 0,\n        trackingModeState: 'inactive'\n    }\n\n    notify = ({ mainMessage = 'SR-Videoplayer', colorMessage = '' }) => {\n        store.addNotification({\n            title: mainMessage,\n            message: colorMessage,\n            type: 'success',\n            insert: 'top',\n            container: 'top-left',\n            animationIn: ['animate__animated', 'animate__fadeIn'],\n            animationOut: ['animate__animated', 'animate__fadeOut'],\n            dismiss: {\n                duration: 10000,\n                onScreen: true\n            }\n        })\n    }\n\n    toggleRepeatMode = () => {\n        const NO_REPEAT_MODE = 'no-repeat'\n        const REPEAT_ONE_MODE = 'repeat-one'\n        const REPEAT_ALL_MODE = 'repeat-all'\n\n        switch (this.state.repeatMode) {\n            case NO_REPEAT_MODE: {\n                this.setState({ repeatMode: REPEAT_ONE_MODE })\n                break\n            }\n            case REPEAT_ONE_MODE: {\n                this.setState({ repeatMode: REPEAT_ALL_MODE })\n                break\n            }\n            case REPEAT_ALL_MODE: {\n                this.setState({ repeatMode: NO_REPEAT_MODE })\n                break\n            }\n            default: {\n                this.setState({ repeatMode: REPEAT_ONE_MODE })\n                break\n            }\n        }\n    }\n\n    handlePlayPause = () => {\n        this.setState({ playing: !this.state.playing })\n    }\n\n    handleStop = () => {\n        this.setState({ url: null, playing: false })\n    }\n\n    handleSetPlaybackRate = e => {\n        this.setState({ playbackRate: parseFloat(e.target.value) })\n    }\n\n    setSpeed = value => {\n        this.setState({ playbackRate: parseFloat(value) })\n    }\n\n    setVideoPosition = value => {\n        this.setState({ currentTime: parseFloat(value) }, () =>\n            this.player.seekTo(parseFloat(value))\n        )\n    }\n\n    handlePrevious = (_, playableUniqueID) => {\n        let currentlyPlaying\n        let currentlyPlayingIndex\n        let newCurrentlyPlayingOBJ\n\n        if (playableUniqueID) {\n            currentlyPlaying = playableUniqueID\n            currentlyPlayingIndex = this.state.playlist.findIndex(\n                item => item.id === currentlyPlaying\n            )\n        } else {\n            currentlyPlaying = this.state.currentlyPlaying\n            currentlyPlayingIndex = this.state.playlist.findIndex(\n                item => item.id === currentlyPlaying\n            )\n            currentlyPlayingIndex--\n        }\n\n        if (currentlyPlayingIndex <= 0) {\n            currentlyPlayingIndex = this.state.playlist.length - 1\n        }\n\n        newCurrentlyPlayingOBJ = this.state.playlist[currentlyPlayingIndex]\n\n        const playingType = newCurrentlyPlayingOBJ['type']\n\n        if (playingType === 'separator') {\n            const nextPlayableIndex = currentlyPlayingIndex - 1\n            const nextPlayableIndexOBJ = this.state.playlist[nextPlayableIndex]\n            const playableUniqueID = nextPlayableIndexOBJ['id']\n\n            return this.handlePrevious(null, playableUniqueID)\n        }\n\n        const newCurrentlyPlaying = newCurrentlyPlayingOBJ['id']\n\n        this.setCurrentlyPlaying(newCurrentlyPlaying, newCurrentlyPlayingOBJ)\n    }\n\n    handleNext = (_, playableUniqueID) => {\n        let currentlyPlaying\n        let currentlyPlayingIndex\n        let newCurrentlyPlayingOBJ\n\n        if (playableUniqueID) {\n            currentlyPlaying = playableUniqueID\n            currentlyPlayingIndex = this.state.playlist.findIndex(\n                item => item.id === currentlyPlaying\n            )\n        } else {\n            currentlyPlaying = this.state.currentlyPlaying\n            currentlyPlayingIndex = this.state.playlist.findIndex(\n                item => item.id === currentlyPlaying\n            )\n            currentlyPlayingIndex++\n        }\n\n        if (currentlyPlayingIndex >= this.state.playlist.length - 1) {\n            currentlyPlayingIndex = 0\n        }\n\n        newCurrentlyPlayingOBJ = this.state.playlist[currentlyPlayingIndex]\n\n        const playingType = newCurrentlyPlayingOBJ['type']\n\n        if (playingType === 'separator') {\n            const nextPlayableIndex = currentlyPlayingIndex + 1\n            const nextPlayableIndexOBJ = this.state.playlist[nextPlayableIndex]\n            const playableUniqueID = nextPlayableIndexOBJ['id']\n\n            return this.handleNext(null, playableUniqueID)\n        }\n\n        const newCurrentlyPlaying = newCurrentlyPlayingOBJ['id']\n\n        this.setCurrentlyPlaying(newCurrentlyPlaying, newCurrentlyPlayingOBJ)\n    }\n\n    handlePause = () => {\n        //  console.log('onPause')\n        this.setState({ playing: false })\n    }\n\n    handlePlay = () => {\n        this.setState({ playing: true })\n        console.log('onPlay')\n    }\n\n    handleError = error => {\n        this.handleNext()\n        console.log('🚀 ~ file: App.js ~ line 169 ~ App ~ error', error)\n    }\n\n    handleEnded = () => {\n        if (this.state.repeatMode === 'no-repeat') {\n            this.handleNext()\n        } else if (this.state.repeatMode === 'repeat-one') {\n            this.setVideoPosition(0)\n            // this.setState({ loop: true })\n        } else if (this.state.repeatMode === 'repeat-all') {\n            this.handleNext()\n        }\n\n        console.log('onEnded\": ', this.state)\n    }\n\n    setCurrentlyPlayingPublic = (uniqueId, callback = () => {}) => {\n        const chosenItemIndex = this.state.playlist.findIndex(\n            item => item.id === uniqueId\n        )\n\n        const chosenItemItemOBJ = this.state.playlist[chosenItemIndex]\n        const playingType = chosenItemItemOBJ['type']\n\n        if (playingType === 'separator') {\n            const nextPlayableIndex = chosenItemIndex + 1\n            const nextPlayableIndexOBJ = this.state.playlist[nextPlayableIndex]\n            const playableUniqueID = nextPlayableIndexOBJ['id']\n\n            this.setCurrentlyPlayingPublic(playableUniqueID)\n        }\n\n        this.setCurrentlyPlaying(uniqueId, chosenItemItemOBJ, callback)\n    }\n\n    setCurrentlyPlaying = (\n        uniqueId,\n        currentlyPlayingOBJ,\n        callback = () => {}\n    ) => {\n        this.setState(\n            {\n                url: currentlyPlayingOBJ.path,\n                currentlyPlaying: uniqueId,\n                playing: true\n            },\n            () => {\n                callback()\n            }\n            // console.error('🚀 🚀 🚀 currentlyPlaying: ', this.state)\n        )\n    }\n\n    setPlaylist = (items = [], isReview, callback = () => {}) => {\n        if (!items.length) return\n\n        let currentlyPlaying\n        let newPlaylist\n        let nextItemToPlay\n\n        if (isReview) {\n            newPlaylist = [...items]\n\n            let index = 0\n\n            nextItemToPlay = newPlaylist[index]\n\n            while (nextItemToPlay?.type === 'separator') {\n                nextItemToPlay = newPlaylist[index]\n                index = index + 1\n            }\n\n            currentlyPlaying = newPlaylist.find(\n                item => item.id === nextItemToPlay.id\n            )\n        } else {\n            const currentPlaylist = this.state.playlist\n\n            newPlaylist = [...currentPlaylist, ...items]\n\n            let index = 0\n\n            nextItemToPlay = items[index]\n\n            while (nextItemToPlay?.type === 'separator') {\n                nextItemToPlay = items[index]\n                index = index + 1\n            }\n\n            currentlyPlaying = newPlaylist.find(\n                item => item.id === nextItemToPlay.id\n            )\n        }\n\n        this.setState(\n            {\n                playlist: newPlaylist,\n                currentlyPlaying: currentlyPlaying.id,\n                url: nextItemToPlay?.path,\n                playing: true\n            },\n            callback()\n        )\n    }\n\n    load = url => {\n        this.setState({\n            url,\n            played: 0,\n            loaded: 0,\n            pip: false\n        })\n    }\n\n    handleDuration = duration => {\n        //  console.log('onDuration', duration)\n        this.setState({ duration })\n    }\n\n    handleToggleControls = () => {\n        const url = this.state.url\n\n        this.setState(\n            {\n                controls: !this.state.controls,\n                url: null\n            },\n            () => this.load(url)\n        )\n    }\n\n    handleToggleLight = () => {\n        this.setState({ light: !this.state.light })\n    }\n\n    handleToggleLoop = () => {\n        this.setState({ loop: !this.state.loop })\n    }\n\n    handleVolumeChange = e => {\n        this.setState({ volume: parseFloat(e.target.value) })\n    }\n\n    handleToggleMuted = () => {\n        this.setState({ muted: !this.state.muted })\n    }\n\n    handleTogglePIP = () => {\n        this.setState({ pip: !this.state.pip })\n    }\n\n    handleEnablePIP = () => {\n        //  console.log('onEnablePIP')\n        this.setState({ pip: true })\n    }\n\n    handleDisablePIP = () => {\n        //  console.log('onDisablePIP')\n        this.setState({ pip: false })\n    }\n\n    handleSeekMouseDown = e => {\n        this.setState({ seeking: true })\n    }\n\n    handleSeekChange = e => {\n        this.setState({ played: parseFloat(e.target.value) })\n    }\n\n    handleSeekMouseUp = e => {\n        this.setState({ seeking: false })\n        this.player.seekTo(parseFloat(e.target.value))\n    }\n\n    handleProgress = state => {\n        //  console.log('onProgress', state)\n\n        // We only want to update time slider if we are not currently seeking\n        if (!this.state.seeking) {\n            this.setState(state)\n        }\n    }\n\n    handleClickFullscreen = () => {\n        screenfull.request(findDOMNode(this.player))\n    }\n\n    renderLoadButton = (url, label) => {\n        return <button onClick={() => this.load(url)}>{label}</button>\n    }\n\n    ref = player => {\n        this.player = player\n    }\n\n    style = {\n        position: 'absolute',\n        left: '-886px',\n        height: '300px',\n        width: '250px',\n        background: ' #a58181'\n    }\n    // ==========================================================\n    // ==========================================================\n\n    replayConfig = {\n        startPosition: 0,\n        endPosition: 120,\n        unsubscribe: null,\n        defaultStartOffset: 30,\n        defaultEndOffset: 120,\n        startOffset: 30,\n        interval: 120,\n        cachedPlaybackRate: 2.0\n    }\n\n    alertConfig = {\n        alertConfigMidwayTime: null,\n        alertConfigOneThirdTime: null,\n        alertConfigTwoThirdTime: null,\n        speedMode: 0, //1\n        lastKeypressTime: null,\n        delta: 500\n    }\n\n    studyStatisticsTracker = (increment = 1) => {\n        const currentSplit = parseInt(\n            this.replayConfig.endPosition / this.replayConfig.interval\n        )\n\n        let reviews = JSON.parse(localStorage.getItem('reviews'))\n        const reviewExists = !!reviews\n        let updatedReview = reviewExists ? reviews : {}\n        let review = updatedReview[this.state.url]\n\n        if (!review) {\n            review = {\n                name: this.state.title,\n                path: this.state.url,\n                type: this.state.videoFormat,\n                replayHistory: {\n                    [`split-${currentSplit}`]: {\n                        count: increment,\n                        startTime: this.replayConfig.startPosition,\n                        endTime: this.replayConfig.endPosition\n                    }\n                },\n                lastReviewDate: Date.now()\n            }\n        } else {\n            if (!review.replayHistory[`split-${currentSplit}`]) {\n                review.replayHistory[`split-${currentSplit}`] = {\n                    count: increment,\n                    startTime: this.replayConfig.startPosition,\n                    endTime: this.replayConfig.endPosition\n                }\n            } else {\n                review.replayHistory[`split-${currentSplit}`].count =\n                    review.replayHistory[`split-${currentSplit}`].count +\n                    increment\n            }\n\n            review.lastReviewDate = Date.now()\n        }\n\n        updatedReview[this.state.url] = { ...review }\n        localStorage.setItem('reviews', JSON.stringify({ ...updatedReview }))\n        this.notifyReplayStatus()\n    }\n\n    setupForStandardTrackingMode = () => {\n        if (this.state.reviewModeSate !== 'inactive') {\n            this.setState({ reviewModeSate: 'inactive' })\n            this.setupReviewMode({ activate: false })\n        }\n\n        let videoSplit = getVideoSplitFactor(this.state.duration)\n\n        this.replayConfig.interval = parseInt(this.state.duration / videoSplit)\n        this.replayConfig.startOffset = convertToNearestX(\n            this.state.currentTime,\n            this.replayConfig.interval\n        )\n    }\n\n    speedTracker = 2\n    trackingMode = (offSet, renormalize = true) => {\n        clearInterval(this.alertConfig.alertConfigMidwayTime)\n        clearInterval(this.alertConfig.alertConfigTwoThirdTime)\n        clearInterval(this.alertConfig.alertConfigOneThirdTime)\n        //   ========================\n\n        if (this.replayConfig.unsubscribe) {\n            clearInterval(this.replayConfig.unsubscribe)\n            this.replayConfig.unsubscribe = null\n            this.notify({\n                mainMessage: 'Replay: Stopped!',\n                colorMessage: 'rtrhfgfdhfghf'\n            })\n        } else {\n            if (renormalize) {\n                this.replayConfig.startPosition = Math.max(\n                    convertToNearest30(this.state.currentTime) - offSet,\n                    0\n                )\n\n                this.replayConfig.endPosition = Math.min(\n                    this.replayConfig.startPosition + offSet,\n                    this.state.duration\n                )\n            } else {\n                this.replayConfig.startPosition = Math.max(\n                    this.replayConfig.startOffset,\n                    0\n                )\n\n                this.replayConfig.endPosition = Math.min(\n                    this.replayConfig.startPosition +\n                        this.replayConfig.interval,\n                    this.state.duration\n                )\n            }\n\n            this.setSpeed(2)\n\n            const minDurationForVideoSplitFactor = 5 * 60\n\n            this.state.duration < minDurationForVideoSplitFactor\n                ? this.setVideoPosition(0)\n                : this.setVideoPosition(\n                      parseInt(this.replayConfig.startPosition)\n                  )\n\n            this.replayConfig.unsubscribe = setInterval(() => {\n                if (\n                    this.state.currentTime >=\n                        this.replayConfig.endPosition - 5 ||\n                    this.state.currentTime < this.replayConfig.startPosition\n                ) {\n                    this.setVideoPosition(this.replayConfig.startPosition)\n\n                    const speedTOptions = [2, 3, 10]\n\n                    this.speedTracker =\n                        (this.speedTracker + 1) % speedTOptions.length\n                    this.setSpeed(speedTOptions[this.speedTracker])\n                    this.studyStatisticsTracker()\n                }\n            }, 1000)\n            this.notifyReplayStatus()\n        }\n    }\n\n    alertAtKeyMoments = () => {\n        clearInterval(this.alertConfig.alertConfigMidwayTime)\n        clearInterval(this.alertConfig.alertConfigTwoThirdTime)\n        clearInterval(this.alertConfig.alertConfigOneThirdTime)\n        this.alertConfig.speedMode === 1 && this.setSpeed(2.5)\n        this.alertConfig.speedMode === 2 && this.setSpeed(2.5)\n        //   =================\n        //   const standardLength = 10 * 60; //10mins\n        //   const minimumLength = 6 * 60; //6mins\n        //   if (this.state.duration < minimumLength) return;\n        //   =================>\n        this.alertConfig.alertConfigOneThirdTime = setInterval(() => {\n            const _25PercentTime = this.state.duration * 0.25 //80%\n\n            if (\n                // this.state.duration > standardLength &&\n                this.state.currentTime > _25PercentTime &&\n                this.state.currentTime < _25PercentTime * 2\n            ) {\n                this.alertConfig.speedMode === 1 && this.setSpeed(3)\n                this.alertConfig.speedMode === 2 && this.setSpeed(3.5)\n\n                const remainTime = this.state.duration - _25PercentTime //25%\n\n                this.notify({\n                    mainMessage: `Alert:\\r\\nJust Past 25%`,\n                    colorMessage: `\\r\\n[${toMinutesSeconds(remainTime, false)}]`\n                })\n                clearInterval(this.alertConfig.alertConfigOneThirdTime)\n            }\n        }, 2000)\n\n        //   =================>\n        this.alertConfig.alertConfigMidwayTime = setInterval(() => {\n            const midwayTime = this.state.duration * 0.5 //60%\n\n            if (this.state.currentTime > midwayTime) {\n                this.alertConfig.speedMode === 1 && this.setSpeed(3)\n                this.alertConfig.speedMode === 2 && this.setSpeed(4)\n\n                const remainTime = this.state.duration - midwayTime //40%\n\n                this.notify({\n                    mainMessage: `Alert:\\r\\nJust Past 50%`,\n                    colorMessage: `\\r\\n[${toMinutesSeconds(remainTime, false)}]`\n                })\n                clearInterval(this.alertConfig.alertConfigMidwayTime)\n            }\n        }, 2000)\n\n        //   =====================>\n        this.alertConfig.alertConfigTwoThirdTime = setInterval(() => {\n            const _75PercentTime = this.state.duration * 0.75 //80%\n\n            if (\n                // this.state.duration > standardLength &&\n                this.state.currentTime > _75PercentTime\n            ) {\n                this.alertConfig.speedMode === 1 && this.setSpeed(3.5)\n                this.alertConfig.speedMode === 2 && this.setSpeed(4.5)\n\n                const remainTime = this.state.duration - _75PercentTime //25%\n\n                this.notify({\n                    mainMessage: `Alert:\\r\\nJust Past 75%`,\n                    colorMessage: `\\r\\n[${toMinutesSeconds(remainTime, false)}]`\n                })\n                clearInterval(this.alertConfig.alertConfigTwoThirdTime)\n            }\n        }, 2000)\n    }\n\n    //   moveToNextPlaybackRange = () => {\n    //     this.replayConfig.startPosition = Math.min(\n    //       this.replayConfig.startPosition + this.replayConfig.interval,\n    //       this.state.duration - this.replayConfig.interval\n    //     )\n    //     this.replayConfig.endPosition = Math.min(\n    //       this.replayConfig.startPosition + this.replayConfig.interval,\n    //       this.state.duration\n    //     )\n    //     this.setVideoPosition(this.replayConfig.startPosition)\n    //     this.notifyReplayStatus()\n    //   }\n\n    //   moveToPreviousPlaybackRange = () => {\n    //     this.replayConfig.startPosition = Math.max(\n    //       this.replayConfig.startPosition - this.replayConfig.interval,\n    //       0\n    //     )\n    //     this.replayConfig.endPosition = Math.min(\n    //       this.replayConfig.startPosition + this.replayConfig.interval,\n    //       this.state.duration\n    //     )\n    //     this.setVideoPosition(this.replayConfig.startPosition)\n    //     this.notifyReplayStatus()\n    //   }\n\n    isReviewing = false\n    unsubscribeToReview = null\n\n    setupReviewMode = ({ activate = true, loopCurrentSplit = false }) => {\n        const deactivate = !activate\n\n        if (deactivate) {\n            clearInterval(this.unsubscribeToReview)\n\n            return this.notify({\n                mainMessage: 'Replay: Stopped!',\n                colorMessage: ''\n            })\n        }\n\n        if (this.state.trackingModeState === 'active') {\n            this.setState({ trackingModeState: 'inactive' })\n            this.trackingMode(null, false)\n        }\n\n        if (this.state.reviewRangeStart)\n            this.setVideoPosition(this.state.reviewRangeStart)\n\n        clearInterval(this.unsubscribeToReview)\n        loopCurrentSplit &&\n            this.notify({\n                mainMessage: `Reviews: Looping`,\n                colorMessage: ''\n            })\n        this.watcherForReviewMode(loopCurrentSplit)\n    }\n\n    watcherForReviewMode = (loopCurrentSplit = false) => {\n        this.unsubscribeToReview = setInterval(() => {\n            if (this.state.currentTime < this.state.reviewRangeStart) {\n                this.setVideoPosition(this.state.reviewRangeStart)\n            }\n\n            if (loopCurrentSplit) {\n                if (this.state.currentTime >= this.state.reviewRangeEnd - 5) {\n                    this.setVideoPosition(this.state.reviewRangeStart)\n                    this.studyStatisticsTracker(0.5)\n                }\n            } else {\n                if (this.state.currentTime >= this.state.reviewRangeEnd - 5) {\n                    this.studyStatisticsTracker(0.25)\n                    // todo ========\n                    this.setCurrentlyPlaying(\n                        this.state.playlist[this.state.currentlyPlaying + 1]\n                    )\n\n                    this.setState({\n                        currentlyPlaying: this.state.currentlyPlaying + 1\n                    })\n                    this.setVideoPosition(this.state.reviewRangeStart)\n                    //  ========\n                    clearInterval(this.unsubscribeToReview)\n                    this.watcherForReviewMode()\n                    // ===================\n                    //  this.setVideoPosition(this.state.reviewRangeStart);\n                    //  this.setSpeed(speedTOptions[this.speedTracker]);\n                    //  studyStatisticsTracker();\n                    //   this.notifyReplayStatus();\n                }\n            }\n        }, 1000)\n    }\n\n    // video.addEventListener('seeked', this.alertAtKeyMoments);\n    videoOnLoadeddata = () => {\n        //   clearInterval(this.replayConfig.unsubscribe);\n        this.alertAtKeyMoments()\n\n        //   setupForStandardTrackingMode();\n        //   this.this.trackingMode(null, false);\n        //   setTimeout(this.notifyReplayStatus, 5000);\n\n        if (this.replayConfig.unsubscribe) {\n            this.replayConfig.unsubscribe = null\n            this.setupForStandardTrackingMode()\n            this.trackingMode(null, false)\n\n            return setTimeout(this.notifyReplayStatus, 5000)\n        }\n\n        const videoTitle = `${this.state.title}  `\n\n        this.notify({\n            mainMessage: videoTitle,\n            colorMessage: `[${toMinutesSeconds(this.state.duration)}]`\n        })\n    }\n\n    // video.addEventListener('timeupdate', detectBackwardSkipSeek);\n\n    videoOnPause = () => {\n        //   this.replayConfig.unsubscribe && studyStatisticsTracker(0.5);\n        this.studyStatisticsTracker(0.5)\n    }\n\n    videoOnended = () => {\n        if (this.replayConfig.unsubscribe) {\n            this.setVideoPosition(this.replayConfig.startPosition)\n            this.notifyReplayStatus()\n        }\n\n        //   this.setSpeed(this.replayConfig.cachedPlaybackRate || 3);\n\n        //   clearInterval(this.replayConfig.unsubscribe);\n        //   this.replayConfig = {};\n\n        this.notify({\n            mainMessage: `Toggle Speed Stopped:`,\n            colorMessage: ''\n        })\n    }\n\n    seekToTime = value => {\n        let seekToTime = this.state.currentTime + value\n\n        if (seekToTime < 0) {\n            this.setVideoPosition(0)\n        } else if (seekToTime > this.state.duration)\n            this.setVideoPosition(this.state.duration)\n\n        this.setVideoPosition(seekToTime)\n        this.notify({\n            mainMessage: `Current Position: <${toMinutesSeconds(\n                this.state.currentTime\n            )}> of <${toMinutesSeconds(this.state.duration)}>`,\n            colorMessage: ''\n        })\n    }\n\n    reduceSpeed = (value = 0.25) => {\n        const MIN_SPEED = 0.5\n        let newSpeed = this.state.playbackRate - value\n\n        newSpeed = newSpeed < MIN_SPEED ? MIN_SPEED : newSpeed\n        this.setSpeed(newSpeed)\n    }\n\n    increaseSpeed = (value = 0.25) => {\n        const MAX_SPEED = 15\n        let newSpeed = this.state.playbackRate + value\n\n        newSpeed = newSpeed > MAX_SPEED ? MAX_SPEED : newSpeed\n        this.setSpeed(newSpeed)\n    }\n\n    notifyReplayStatus = () => {\n        const currentSplit = parseInt(\n            this.replayConfig.endPosition / this.replayConfig.interval\n        )\n        const totalSplit = parseInt(\n            this.state.duration / this.replayConfig.interval\n        )\n\n        let reviews = JSON.parse(localStorage.getItem('reviews'))\n\n        let videoStat =\n            reviews &&\n            reviews[this.state.url]?.replayHistory[`split-${currentSplit}`]\n                ?.count\n\n        this.notify({\n            mainMessage: `Video Stats: Split watch count:: ${\n                videoStat ?? 0\n            } times!\n    \\r\\nReplay: is ${\n        this.replayConfig.unsubscribe ? 'ON!:' : 'OFF!:'\n    }\\r\\nStart Time: ${toMinutesSeconds(\n                this.replayConfig.startPosition\n            )}\\r\\nEnd Time:  ${toMinutesSeconds(\n                this.replayConfig.endPosition\n            )}`,\n            colorMessage: `\\r\\nPosition:   [${currentSplit}] of [${totalSplit}]`,\n            delay: 20000\n        })\n    }\n    // ==========================================================\n    // ==========================================================\n\n    render() {\n        const {\n            url,\n            playing,\n            controls,\n            light,\n            volume,\n            muted,\n            loop,\n            played,\n            loaded,\n            duration,\n            playbackRate,\n            pip\n        } = this.state\n\n        return (\n            <div className=\"app\">\n                <div className=\"player-wrapper\">\n                    <ReactPlayer\n                        ref={this.ref}\n                        className=\"react-player\"\n                        width=\"auto\"\n                        height=\"100vh\"\n                        url={url}\n                        pip={pip}\n                        playing={playing}\n                        played={played}\n                        controls={controls}\n                        light={light}\n                        loop={loop}\n                        playbackRate={playbackRate}\n                        volume={volume}\n                        muted={muted}\n                        onReady={() => {\n                            console.log('onReady')\n                            this.videoOnLoadeddata()\n                        }}\n                        onStart={() => {\n                            console.log('onStart')\n                        }}\n                        onPlay={this.handlePlay}\n                        onEnablePIP={this.handleEnablePIP}\n                        onDisablePIP={this.handleDisablePIP}\n                        onPause={this.handlePause}\n                        onBuffer={() => console.log('onBuffer')}\n                        onSeek={e => console.log('onSeek', e)}\n                        onEnded={this.handleEnded}\n                        onError={this.handleError}\n                        onProgress={this.handleProgress}\n                        onDuration={this.handleDuration}\n                        config={{\n                            youtube: {\n                                playerVars: {\n                                    showinfo: 1,\n                                    // disablekb: 1,\n                                    iv_load_policy: 3,\n                                    modestbranding: 1,\n                                    rel: 0\n                                }\n                            }\n                        }}\n                    />\n\n                    <Toolbar\n                        currentlyPlaying={this.state.currentlyPlaying}\n                        setCurrentlyPlaying={this.setCurrentlyPlayingPublic}\n                        playlist={this.state.playlist}\n                        setPlaylist={this.setPlaylist}\n                        handlePrevious={this.handlePrevious}\n                        handleNext={this.handleNext}\n                        notify={this.notify}\n                        toggleRepeatMode={this.toggleRepeatMode}\n                        repeatMode={this.state.repeatMode}\n                    ></Toolbar>\n                    <ReactNotification></ReactNotification>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default hot(module)(App)\n","/Users/kaybanks/Repository/videoplayer/src/index.js",[],"/Users/kaybanks/Repository/videoplayer/src/components/playlist.js",[],["76","77"],"/Users/kaybanks/Repository/videoplayer/src/components/SortingOption.js",[],["78","79"],"/Users/kaybanks/Repository/videoplayer/src/components/toolbar.js",[],"/Users/kaybanks/Repository/videoplayer/src/utility/playlistCreator.js",[],"/Users/kaybanks/Repository/videoplayer/src/utility/Duration.js",[],["80","81"],"/Users/kaybanks/Repository/videoplayer/src/components/volume.js",[],"/Users/kaybanks/Repository/videoplayer/src/utility/index.js",[],["82","83"],"/Users/kaybanks/Repository/videoplayer/src/components/buttons.js",[],"/Users/kaybanks/Repository/videoplayer/src/player/drag.js",["84"],"const drag = {\n  cs: [],\n  onDrag(c) {\n    drag.cs.push(c)\n  }\n}\n\nexport const drop = async (es, loadFiles) => {\n  //   absolutePath: new URL(`file:///${entry.path}`).href;\n  let files = []\n  const entries = es\n    .map(f =>\n      f.webkitGetAsEntry\n        ? f.webkitGetAsEntry()\n        : {\n            isFile: true,\n            file(c) {\n              c(f)\n            }\n          }\n    )\n    .filter(a => a)\n\n  const checkEntry = async entry => {\n    const file = await new Promise(resolve => entry.file(resolve))\n\n    if (file.type) {\n      if (file.type.startsWith('audio/') || file.type.startsWith('video/')) {\n        files.push(file)\n      }\n    } else {\n      if (file.name.startsWith('.') === false) {\n        //   files.push(file);\n      }\n    }\n  }\n\n  const readEntries = entry =>\n    new Promise(resolve => {\n      const directoryReader = entry.createReader()\n\n      directoryReader.readEntries(async entries => {\n        //   console.error('entries: ', entries);\n        for (const entry of entries) {\n          if (entry.isFile) {\n            await checkEntry(entry)\n          } else {\n            await readEntries(entry)\n          }\n        }\n\n        resolve()\n      })\n    })\n\n  for (const entry of entries) {\n    if (entry.isFile) {\n      await checkEntry(entry)\n    } else {\n      await readEntries(entry)\n    }\n  }\n\n  //   files = files.sort((a, b) => parseInt(a.name) - parseInt(b.name));\n\n  //   files = files.sort((a, b) =>\n  //     b.name.localeCompare(a.name)\n  //   );\n  if (files.length) {\n    //  for (const c of drag.cs) {\n    //    c(files)\n    //  }\n\n    loadFiles(files)\n  }\n}\n\nexport default drag\n\nfunction setUpFileUpload() {\n  document.addEventListener('drop', e => {\n    e.preventDefault()\n    drop([...e.dataTransfer.items])\n  })\n\n  document.addEventListener('dragover', e => e.preventDefault())\n\n  const container = document.getElementById('video-container')\n\n  container.addEventListener('dblclick', e => {\n    if (e.target === container) {\n      const input = document.createElement('input')\n\n      input.type = 'file'\n      input.multiple = true\n      input.accept = 'video/*, audio/*'\n\n      input.onchange = () => {\n        if (input.files.length) {\n          drop([...input.files])\n        }\n      }\n\n      input.click()\n    }\n  })\n}\n",["85","86"],"/Users/kaybanks/Repository/videoplayer/src/utility/startup.js",[],"/Users/kaybanks/Repository/videoplayer/src/utility/youtube.js",["87"],"import { Observable, firstValueFrom } from 'rxjs'\n\nexport default async function getVideoDataFromUrl(url) {\n  const videoId = parseYoutubeUrl(url)\n\n  if (!videoId) return false\n\n  let videoData = await firstValueFrom(getVideoData$(videoId)) // await video data\n\n  console.log(\n    '🚀 ~ file: youtube.js ~ line 12 ~ getVideoDataFromUrl ~ videoData',\n    videoData\n  )\n\n  return videoData\n}\n\nfunction getVideoData$(ytId) {\n  return new Observable(observer => {\n    let embed = document.createElement('iframe')\n\n    embed.setAttribute(\n      'src',\n      `https://www.youtube.com/embed/${ytId}?enablejsapi=1&widgetid=99`\n    )\n    embed.cssText = 'position: absolute; display: none'\n\n    embed.onload = function () {\n      var message = JSON.stringify({\n        event: 'listening',\n        id: 99,\n        channel: 'widget'\n      })\n\n      embed.contentWindow.postMessage(message, 'https://www.youtube.com')\n    }\n\n    function parseData(e) {\n      const { event, id, info } = JSON.parse(e.data)\n\n      // console.log(JSON.parse(e.data))\n      if (event === 'initialDelivery' && id == 99) observer.next(info.videoData)\n    }\n\n    document.body.appendChild(embed) // load iframe\n    window.addEventListener('message', parseData) // add Api listener for initialDelivery\n\n    return function cleanup() {\n      window.removeEventListener('message', parseData)\n      document.body.removeChild(embed)\n    }\n  })\n}\n\nexport function parseYoutubeUrl(url) {\n  var p = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/\n  let urlMatch = url.match(p)\n\n  if (urlMatch) return urlMatch[1]\n\n  return false\n}\n","/Users/kaybanks/Repository/videoplayer/src/player/notify.js",[],"/Users/kaybanks/Repository/videoplayer/src/utility/seedData.js",["88"],"/Users/kaybanks/Repository/videoplayer/src/components/playlistItem.js",[],{"ruleId":"89","severity":1,"message":"90","line":845,"column":13,"nodeType":"91","messageId":"92","endLine":845,"endColumn":19},{"ruleId":"89","severity":1,"message":"93","line":846,"column":13,"nodeType":"91","messageId":"92","endLine":846,"endColumn":21},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"94","replacedBy":"98"},{"ruleId":"96","replacedBy":"99"},{"ruleId":"94","replacedBy":"100"},{"ruleId":"96","replacedBy":"101"},{"ruleId":"94","replacedBy":"102"},{"ruleId":"96","replacedBy":"103"},{"ruleId":"89","severity":1,"message":"104","line":80,"column":10,"nodeType":"91","messageId":"92","endLine":80,"endColumn":25},{"ruleId":"94","replacedBy":"105"},{"ruleId":"96","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":42,"column":45,"nodeType":"109","messageId":"110","endLine":42,"endColumn":47},{"ruleId":"89","severity":1,"message":"111","line":3,"column":5,"nodeType":"91","messageId":"92","endLine":3,"endColumn":19},"no-unused-vars","'loaded' is assigned a value but never used.","Identifier","unusedVar","'duration' is assigned a value but never used.","no-native-reassign",["112"],"no-negated-in-lhs",["113"],["112"],["113"],["112"],["113"],["112"],["113"],"'setUpFileUpload' is defined but never used.",["112"],["113"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'reviewsOffline' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]