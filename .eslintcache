[{"/Users/kaybanks/Repository/videoplayer/src/App.js":"1","/Users/kaybanks/Repository/videoplayer/src/components/buttons.js":"2","/Users/kaybanks/Repository/videoplayer/src/components/keyboard.events.js":"3","/Users/kaybanks/Repository/videoplayer/src/components/SortingOption.js":"4","/Users/kaybanks/Repository/videoplayer/src/components/toolbar.js":"5","/Users/kaybanks/Repository/videoplayer/src/components/playlistItem.js":"6","/Users/kaybanks/Repository/videoplayer/src/player/drag.js":"7","/Users/kaybanks/Repository/videoplayer/src/components/stats.service.js":"8","/Users/kaybanks/Repository/videoplayer/src/components/playlist.js":"9","/Users/kaybanks/Repository/videoplayer/src/utility/index.js":"10","/Users/kaybanks/Repository/videoplayer/src/utility/startup.js":"11","/Users/kaybanks/Repository/videoplayer/src/utility/youtube.js":"12","/Users/kaybanks/Repository/videoplayer/src/utility/seedData.js":"13","/Users/kaybanks/Repository/videoplayer/src/utility/playlistCreator.js":"14"},{"size":16905,"mtime":1634004641097,"results":"15","hashOfConfig":"16"},{"size":4486,"mtime":1634126292540,"results":"17","hashOfConfig":"16"},{"size":2968,"mtime":1633993420983,"results":"18","hashOfConfig":"16"},{"size":1428,"mtime":1633872127469,"results":"19","hashOfConfig":"16"},{"size":2136,"mtime":1634003830500,"results":"20","hashOfConfig":"16"},{"size":1644,"mtime":1633999661942,"results":"21","hashOfConfig":"16"},{"size":2281,"mtime":1633543023689,"results":"22","hashOfConfig":"16"},{"size":14496,"mtime":1633996336956,"results":"23","hashOfConfig":"16"},{"size":6899,"mtime":1633998484098,"results":"24","hashOfConfig":"16"},{"size":8330,"mtime":1633970614101,"results":"25","hashOfConfig":"16"},{"size":714,"mtime":1633488184587,"results":"26","hashOfConfig":"16"},{"size":1665,"mtime":1633581258720,"results":"27","hashOfConfig":"16"},{"size":18459,"mtime":1633875163723,"results":"28","hashOfConfig":"16"},{"size":1506,"mtime":1633905594354,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"149wjm3",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kaybanks/Repository/videoplayer/src/App.js",[],["64","65"],"/Users/kaybanks/Repository/videoplayer/src/components/buttons.js",[],"/Users/kaybanks/Repository/videoplayer/src/components/keyboard.events.js",[],["66","67"],"/Users/kaybanks/Repository/videoplayer/src/components/SortingOption.js",[],"/Users/kaybanks/Repository/videoplayer/src/components/toolbar.js",[],"/Users/kaybanks/Repository/videoplayer/src/components/playlistItem.js",[],"/Users/kaybanks/Repository/videoplayer/src/player/drag.js",["68"],"const drag = {\n  cs: [],\n  onDrag(c) {\n    drag.cs.push(c)\n  }\n}\n\nexport const drop = async (es, loadFiles) => {\n  //   absolutePath: new URL(`file:///${entry.path}`).href;\n  let files = []\n  const entries = es\n    .map(f =>\n      f.webkitGetAsEntry\n        ? f.webkitGetAsEntry()\n        : {\n            isFile: true,\n            file(c) {\n              c(f)\n            }\n          }\n    )\n    .filter(a => a)\n\n  const checkEntry = async entry => {\n    const file = await new Promise(resolve => entry.file(resolve))\n\n    if (file.type) {\n      if (file.type.startsWith('audio/') || file.type.startsWith('video/')) {\n        files.push(file)\n      }\n    } else {\n      if (file.name.startsWith('.') === false) {\n        //   files.push(file);\n      }\n    }\n  }\n\n  const readEntries = entry =>\n    new Promise(resolve => {\n      const directoryReader = entry.createReader()\n\n      directoryReader.readEntries(async entries => {\n        //   console.error('entries: ', entries);\n        for (const entry of entries) {\n          if (entry.isFile) {\n            await checkEntry(entry)\n          } else {\n            await readEntries(entry)\n          }\n        }\n\n        resolve()\n      })\n    })\n\n  for (const entry of entries) {\n    if (entry.isFile) {\n      await checkEntry(entry)\n    } else {\n      await readEntries(entry)\n    }\n  }\n\n  //   files = files.sort((a, b) => parseInt(a.name) - parseInt(b.name));\n\n  //   files = files.sort((a, b) =>\n  //     b.name.localeCompare(a.name)\n  //   );\n  if (files.length) {\n    //  for (const c of drag.cs) {\n    //    c(files)\n    //  }\n\n    loadFiles(files)\n  }\n}\n\nexport default drag\n\nfunction setUpFileUpload() {\n  document.addEventListener('drop', e => {\n    e.preventDefault()\n    drop([...e.dataTransfer.items])\n  })\n\n  document.addEventListener('dragover', e => e.preventDefault())\n\n  const container = document.getElementById('video-container')\n\n  container.addEventListener('dblclick', e => {\n    if (e.target === container) {\n      const input = document.createElement('input')\n\n      input.type = 'file'\n      input.multiple = true\n      input.accept = 'video/*, audio/*'\n\n      input.onchange = () => {\n        if (input.files.length) {\n          drop([...input.files])\n        }\n      }\n\n      input.click()\n    }\n  })\n}\n","/Users/kaybanks/Repository/videoplayer/src/components/stats.service.js",["69"],"import {\n\tconvertToNearest30,\n\tconvertToNearestX,\n\tgetVideoSplitFactor,\n\ttoMinutesSeconds,\n} from \"../utility/index\";\n\nexport const reviewConfig = {\n\treviewMode: \"inactive\",\n\treviewStartRange: 0,\n\treviewEndRange: 0,\n};\n\nexport const trackingConfig = {\n\ttrackingMode: \"inactive\",\n\tstartPosition: 0,\n\tendPosition: 120,\n\tunsubscribe: null,\n\tdefaultStartOffset: 30,\n\tdefaultEndOffset: 120,\n\tstartOffset: 30,\n\tinterval: 120,\n\tcachedPlaybackRate: 2.0,\n};\nexport const alertConfig = {\n\talertConfigMidwayTime: null,\n\talertConfigOneThirdTime: null,\n\talertConfigTwoThirdTime: null,\n\tspeedMode: 0, //1\n\tlastKeypressTime: null,\n\tdelta: 500,\n};\n\nexport function studyStatisticsTracker(increment = 1) {\n\tconst currentSplit = parseInt(trackingConfig.endPosition / trackingConfig.interval);\n\tlet reviews = JSON.parse(localStorage.getItem(\"reviews\"));\n\tconst reviewExists = !!reviews;\n\tlet updatedReview = reviewExists ? reviews : {};\n\tlet review = updatedReview[this.state.url];\n\n\tif (!review) {\n\t\treview = {\n\t\t\tname: this.state.title,\n\t\t\tpath: this.state.url,\n\t\t\ttype: this.state.videoFormat,\n\t\t\treplayHistory: {\n\t\t\t\t[`split-${currentSplit}`]: {\n\t\t\t\t\tcount: increment,\n\t\t\t\t\tstartTime: trackingConfig.startPosition,\n\t\t\t\t\tendTime: trackingConfig.endPosition,\n\t\t\t\t},\n\t\t\t},\n\t\t\tlastReviewDate: Date.now(),\n\t\t};\n\t} else {\n\t\tif (!review.replayHistory[`split-${currentSplit}`]) {\n\t\t\treview.replayHistory[`split-${currentSplit}`] = {\n\t\t\t\tcount: increment,\n\t\t\t\tstartTime: trackingConfig.startPosition,\n\t\t\t\tendTime: trackingConfig.endPosition,\n\t\t\t};\n\t\t} else {\n\t\t\treview.replayHistory[`split-${currentSplit}`].count =\n\t\t\t\treview.replayHistory[`split-${currentSplit}`].count + increment;\n\t\t}\n\n\t\treview.lastReviewDate = Date.now();\n\t}\n\n\tupdatedReview[this.state.url] = { ...review };\n\tlocalStorage.setItem(\"reviews\", JSON.stringify({ ...updatedReview }));\n\t// this.notifyReplayStatus();\n}\n\n// =============================================================================\n// =============================================================================\n\nexport function setupTrackingMode() {\n\tif (reviewConfig.reviewMode !== \"inactive\") {\n\t\treviewConfig.reviewMode = \"inactive\";\n\t\tthis.setupReviewMode({ activate: false });\n\t}\n\n\tlet videoSplit = getVideoSplitFactor(this.player?.getDuration());\n\n\ttrackingConfig.interval = parseInt(this.player?.getDuration() / videoSplit);\n\ttrackingConfig.startOffset = convertToNearestX(\n\t\tthis.player?.getCurrentTime(),\n\t\ttrackingConfig.interval\n\t);\n\t//====================\n\tthis.trackingMode(null, false);\n}\n\nlet speedTracker = 2;\n\nexport function trackingMode(offSet, renormalize = true) {\n\tclearInterval(alertConfig.alertConfigMidwayTime);\n\tclearInterval(alertConfig.alertConfigTwoThirdTime);\n\tclearInterval(alertConfig.alertConfigOneThirdTime);\n\t//   ========================\n\n\tif (trackingConfig.unsubscribe) {\n\t\tclearInterval(trackingConfig.unsubscribe);\n\t\ttrackingConfig.unsubscribe = null;\n\t\ttrackingConfig.trackingMode = \"inactive\";\n\t\tthis.notify({\n\t\t\ttitle: \"Tracking mode:\",\n\t\t\tmessage: \"Tracking: Stopped!\",\n\t\t});\n\t} else {\n\t\tif (renormalize) {\n\t\t\ttrackingConfig.startPosition = Math.max(\n\t\t\t\tconvertToNearest30(this.player?.getCurrentTime()) - offSet,\n\t\t\t\t0\n\t\t\t);\n\n\t\t\ttrackingConfig.endPosition = Math.min(\n\t\t\t\ttrackingConfig.startPosition + offSet,\n\t\t\t\tthis.player?.getDuration()\n\t\t\t);\n\t\t} else {\n\t\t\ttrackingConfig.startPosition = Math.max(trackingConfig.startOffset, 0);\n\t\t\ttrackingConfig.endPosition = Math.min(\n\t\t\t\ttrackingConfig.startPosition + trackingConfig.interval,\n\t\t\t\tthis.player?.getDuration()\n\t\t\t);\n\t\t}\n\n\t\tthis.setSpeed(2);\n\n\t\tconst minDurationForVideoSplitFactor = 5 * 60;\n\n\t\tthis.player?.getDuration() < minDurationForVideoSplitFactor\n\t\t\t? this.setVideoPosition(0)\n\t\t\t: this.setVideoPosition(parseInt(trackingConfig.startPosition));\n\n\t\ttrackingConfig.unsubscribe = setInterval(() => {\n\t\t\tif (\n\t\t\t\tthis.player?.getCurrentTime() >= trackingConfig.endPosition - 5 ||\n\t\t\t\tthis.player?.getCurrentTime() < trackingConfig.startPosition\n\t\t\t) {\n\t\t\t\tthis.setVideoPosition(trackingConfig.startPosition);\n\n\t\t\t\tconst speedTOptions = [2, 3, 10];\n\n\t\t\t\tspeedTracker = (speedTracker + 1) % speedTOptions.length;\n\t\t\t\tthis.setSpeed(speedTOptions[speedTracker]);\n\t\t\t\tthis.studyStatisticsTracker();\n\t\t\t}\n\t\t}, 1000);\n\t\ttrackingConfig.trackingMode = \"active\";\n\t\tthis.notifyTrackingStatus();\n\t\t// this.notify({\n\t\t//     title: 'Tracking mode:',\n\t\t//     message: 'Tracking: Started!'\n\t\t// })\n\t}\n}\n\n// =============================================================================\n// =============================================================================\n\nexport function moveToNextPlaybackRange() {\n\ttrackingConfig.startPosition = Math.min(\n\t\ttrackingConfig.startPosition + trackingConfig.interval,\n\t\tthis.player?.getDuration() - trackingConfig.interval\n\t);\n\n\ttrackingConfig.endPosition = Math.min(\n\t\ttrackingConfig.startPosition + trackingConfig.interval,\n\t\tthis.player?.getDuration()\n\t);\n\tthis.setVideoPosition(trackingConfig.startPosition);\n\tthis.notifyTrackingStatus();\n}\n\nexport function moveToPreviousPlaybackRange() {\n\ttrackingConfig.startPosition = Math.max(\n\t\ttrackingConfig.startPosition - trackingConfig.interval,\n\t\t0\n\t);\n\n\ttrackingConfig.endPosition = Math.min(\n\t\ttrackingConfig.startPosition + trackingConfig.interval,\n\t\tthis.player?.getDuration()\n\t);\n\tthis.setVideoPosition(trackingConfig.startPosition);\n\tthis.notifyTrackingStatus();\n}\n// =============================================================================\n// =============================================================================\n\nlet unsubscribeToReview = null;\n\nexport function setupReviewMode({ activate = true, loopCurrentSplit = false }) {\n\tif (!activate) {\n\t\tclearInterval(unsubscribeToReview);\n\t\tunsubscribeToReview = null;\n\t\treviewConfig.reviewMode = \"inactive\";\n\t\treturn this.notify({\n\t\t\ttitle: \"reviewMode:\",\n\t\t\tmessage: \"Review: Stopped!\",\n\t\t});\n\t}\n\n\tif (trackingConfig.trackingMode === \"active\") {\n\t\ttrackingConfig.trackingMode = \"inactive\";\n\t\ttrackingConfig.unsubscribe = null;\n\t\tthis.trackingMode(null, false);\n\t}\n\t// =====================================\n\n\tif (loopCurrentSplit) {\n\t\treviewConfig.reviewMode = \"loop\";\n\t\tthis.notify({\n\t\t\ttitle: \"reviewMode:\",\n\t\t\tmessage: \" Review mode: Looping\",\n\t\t});\n\t} else {\n\t\treviewConfig.reviewMode = \"active\";\n\t\tthis.notify({\n\t\t\ttitle: \"reviewMode:\",\n\t\t\tmessage: \" Review mode: Active\",\n\t\t});\n\t}\n\tif (reviewConfig.reviewStartRange) this.setVideoPosition(reviewConfig.reviewStartRange);\n\n\tclearInterval(unsubscribeToReview);\n\tunsubscribeToReview = null;\n\tthis.watcherForReviewMode(loopCurrentSplit);\n}\n\nexport function watcherForReviewMode(loopCurrentSplit = false) {\n\tclearInterval(alertConfig.alertConfigMidwayTime);\n\tclearInterval(alertConfig.alertConfigTwoThirdTime);\n\tclearInterval(alertConfig.alertConfigOneThirdTime);\n\t//   ========================\n\tunsubscribeToReview = setInterval(() => {\n\t\tif (this.player?.getCurrentTime() < reviewConfig.reviewStartRange) {\n\t\t\tthis.setVideoPosition(reviewConfig.reviewStartRange);\n\t\t}\n\n\t\tif (loopCurrentSplit) {\n\t\t\tif (this.player?.getCurrentTime() < reviewConfig.reviewEndRange - 5) return;\n\t\t\tthis.setVideoPosition(reviewConfig.reviewStartRange);\n\t\t\tthis.studyStatisticsTracker(0.5);\n\t\t} else {\n\t\t\tif (this.player?.getCurrentTime() < reviewConfig.reviewEndRange - 5) return;\n\t\t\tthis.studyStatisticsTracker(0.25);\n\t\t\t// todo ========\n\t\t\tthis.handleNext();\n\t\t\tthis.setState({\n\t\t\t\tcurrentlyPlaying: this.state.currentlyPlaying + 1,\n\t\t\t});\n\t\t\tthis.setVideoPosition(reviewConfig.reviewStartRange);\n\t\t\t//  ========\n\t\t\tclearInterval(unsubscribeToReview);\n\t\t\tthis.watcherForReviewMode();\n\t\t\t// ===================\n\t\t\t//  this.setVideoPosition( reviewConfig.reviewStartRange);\n\t\t\t//  this.setSpeed(speedTOptions[this.speedTracker]);\n\t\t\t//  studyStatisticsTracker();\n\t\t\tthis.notifyReplayStatus();\n\t\t}\n\t}, 1000);\n}\n// =============================================================================\n// =============================================================================\n\nexport function alertAtKeyMoments() {\n\tclearInterval(alertConfig.alertConfigMidwayTime);\n\tclearInterval(alertConfig.alertConfigTwoThirdTime);\n\tclearInterval(alertConfig.alertConfigOneThirdTime);\n\talertConfig.speedMode === 1 && this.setSpeed(2.5);\n\talertConfig.speedMode === 2 && this.setSpeed(2.5);\n\t//   =================\n\t//   const standardLength = 10 * 60; //10mins\n\t//   const minimumLength = 6 * 60; //6mins\n\t//   if (this.player?.getDuration()< minimumLength) return;\n\t//   =================>\n\talertConfig.alertConfigOneThirdTime = setInterval(() => {\n\t\tconst _25PercentTime = this.player?.getDuration() * 0.25; //80%\n\n\t\tif (\n\t\t\t// this.player?.getDuration()> standardLength &&\n\t\t\tthis.player?.getCurrentTime() > _25PercentTime &&\n\t\t\tthis.player?.getCurrentTime() < _25PercentTime * 2\n\t\t) {\n\t\t\talertConfig.speedMode === 1 && this.setSpeed(3);\n\t\t\talertConfig.speedMode === 2 && this.setSpeed(3.5);\n\n\t\t\tconst remainTime = this.player?.getDuration() - _25PercentTime; //25%\n\n\t\t\tthis.notify({\n\t\t\t\ttitle: `Alert: Just Past 25%`,\n\t\t\t\tmessage: `[${toMinutesSeconds(remainTime, false)}]`,\n\t\t\t});\n\t\t\tclearInterval(alertConfig.alertConfigOneThirdTime);\n\t\t}\n\t}, 2000);\n\n\t//   =================>\n\talertConfig.alertConfigMidwayTime = setInterval(() => {\n\t\tconst midwayTime = this.player?.getDuration() * 0.5; //60%\n\n\t\tif (this.player?.getCurrentTime() > midwayTime) {\n\t\t\talertConfig.speedMode === 1 && this.setSpeed(3);\n\t\t\talertConfig.speedMode === 2 && this.setSpeed(4);\n\n\t\t\tconst remainTime = this.player?.getDuration() - midwayTime; //40%\n\n\t\t\tthis.notify({\n\t\t\t\ttitle: `Alert:Just Past 50%`,\n\t\t\t\tmessage: `[${toMinutesSeconds(remainTime, false)}]`,\n\t\t\t});\n\t\t\tclearInterval(alertConfig.alertConfigMidwayTime);\n\t\t}\n\t}, 2000);\n\n\t//   =====================>\n\talertConfig.alertConfigTwoThirdTime = setInterval(() => {\n\t\tconst _75PercentTime = this.player?.getDuration() * 0.75; //80%\n\n\t\tif (\n\t\t\t// this.player?.getDuration()> standardLength &&\n\t\t\tthis.player?.getCurrentTime() > _75PercentTime\n\t\t) {\n\t\t\talertConfig.speedMode === 1 && this.setSpeed(3.5);\n\t\t\talertConfig.speedMode === 2 && this.setSpeed(4.5);\n\n\t\t\tconst remainTime = this.player?.getDuration() - _75PercentTime; //25%\n\n\t\t\tthis.notify({\n\t\t\t\ttitle: `Alert:Just Past 75%`,\n\t\t\t\tmessage: `[${toMinutesSeconds(remainTime, false)}]`,\n\t\t\t});\n\t\t\tclearInterval(alertConfig.alertConfigTwoThirdTime);\n\t\t}\n\t}, 2000);\n}\n\nexport function notifyReplayStatus() {\n\tconst currentSplit = parseInt(trackingConfig.endPosition / trackingConfig.interval);\n\tconst totalSplit = parseInt(this.player?.getDuration() / trackingConfig.interval);\n\tlet reviews = JSON.parse(localStorage.getItem(\"reviews\"));\n\n\tlet videoStat =\n\t\treviews && reviews[this.state.url]?.replayHistory[`split-${currentSplit}`]?.count;\n\n\tthis.notify({\n\t\ttitle: `Video Stats:\n        \\r\\nSplit watch count:: ${videoStat ?? 0} times!\n        \\r\\nReview: is ${\n\t\t\treviewConfig.reviewMode === \"active\" ? \"ON!:\" : \"OFF!:\"\n\t\t}\\r\\nStart Time: ${toMinutesSeconds(\n\t\t\ttrackingConfig.startPosition\n\t\t)}\\r\\nEnd Time:  ${toMinutesSeconds(trackingConfig.endPosition)}`,\n\t\tmessage: `Position:   [${currentSplit}] of [${totalSplit}]`,\n\t\tdelay: 20000,\n\t});\n}\nexport function notifyTrackingStatus() {\n\tconst currentSplit = parseInt(trackingConfig.endPosition / trackingConfig.interval);\n\tconst totalSplit = parseInt(this.player?.getDuration() / trackingConfig.interval);\n\tlet reviews = JSON.parse(localStorage.getItem(\"reviews\"));\n\n\tlet videoStat =\n\t\treviews && reviews[this.state.url]?.replayHistory[`split-${currentSplit}`]?.count;\n\n\tthis.notify({\n\t\ttitle: \"Tracking:\",\n\t\tmessage: `Split watch count:: ${videoStat ?? 0} times!\n        \\r\\nTracking: is ${trackingConfig.trackingMode === \"active\" ? \"ON!:\" : \"OFF!:\"}`,\n\t\tdelay: 20000,\n\t});\n}\n//=================================================================\n//=================================================================\n\n// video.addEventListener('seeked', this.alertAtKeyMoments);\nexport function videoOnLoadeddata() {\n\tlet isReviewMode_TrackingMode_Active =\n\t\ttrackingConfig.trackingMode !== \"inactive\" || reviewConfig.reviewMode !== \"inactive\";\n\n\tif (!isReviewMode_TrackingMode_Active) {\n\t\tthis.alertAtKeyMoments();\n\t}\n\t//   clearInterval( trackingConfig.unsubscribe);\n\t//\n\n\t//   setupTrackingMode();\n\t//   this.trackingMode(null, false);\n\t//   setTimeout(this.notifyReplayStatus, 5000);\n\n\tif (trackingConfig.unsubscribe) {\n\t\ttrackingConfig.unsubscribe = null;\n\t\tthis.setupTrackingMode();\n\t\tthis.trackingMode(null, false);\n\t\treturn setTimeout(this.notifyTrackingStatus.bind(this), 5000);\n\t}\n\n\t// this.notify({\n\t// \ttitle: `Title: ${this.state.title}`,\n\t// \tmessage: `[${toMinutesSeconds(this.player?.getDuration())}]`,\n\t// });\n}\n\n// video.addEventListener('timeupdate', detectBackwardSkipSeek);\n\nexport function videoOnPause() {\n\t//    trackingConfig.unsubscribe && studyStatisticsTracker(0.5);\n\tthis.studyStatisticsTracker(0.5);\n}\nexport function videoOnended() {\n\tif (trackingConfig.unsubscribe) {\n\t\tthis.setVideoPosition(trackingConfig.startPosition);\n\t\tthis.notifyTrackingStatus();\n\t}\n\n\t//   this.setSpeed( trackingConfig.cachedPlaybackRate || 3);\n\n\t//   clearInterval( trackingConfig.unsubscribe);\n\t//    trackingConfig = {};\n\n\t// this.notify({\n\t// \ttitle: `Toggle Speed Stopped:`,\n\t// \tmessage: \"\",\n\t// });\n}\n\nexport function seekToTime(value) {\n\tlet seekToTime = this.player?.getCurrentTime() + value;\n\n\tif (seekToTime < 0) {\n\t\tthis.setVideoPosition(0);\n\t} else if (seekToTime > this.player?.getDuration())\n\t\tthis.setVideoPosition(this.player?.getDuration());\n\n\tthis.setVideoPosition(seekToTime);\n\t// this.notify({\n\t//     title: 'Sample Title: ',\n\t//     message: `Current Position: <${toMinutesSeconds(\n\t//         this.player?.getCurrentTime()\n\t//     )}> of <${toMinutesSeconds(this.player?.getDuration())}>`\n\t// })\n}\n\nexport function reduceSpeed(value = 0.25) {\n\tconst MIN_SPEED = 0.5;\n\tlet newSpeed = this.state.playbackRate - value;\n\n\tnewSpeed = newSpeed < MIN_SPEED ? MIN_SPEED : newSpeed;\n\tthis.setSpeed(newSpeed);\n}\n\nexport function increaseSpeed(value = 0.25) {\n\tconst MAX_SPEED = 15;\n\tlet newSpeed = this.state.playbackRate + value;\n\n\tnewSpeed = newSpeed > MAX_SPEED ? MAX_SPEED : newSpeed;\n\tthis.setSpeed(newSpeed);\n}\n\nexport function changeReviewMode() {\n\tif (this.reviewConfig.reviewMode === \"active\") {\n\t\tthis.setupReviewMode({ loopCurrentSplit: true });\n\t} else if (this.reviewConfig.reviewMode === \"loop\") {\n\t\tthis.setupReviewMode({ activate: false });\n\t} else if (this.reviewConfig.reviewMode === \"inactive\") {\n\t\tthis.setupReviewMode({ activate: true });\n\t}\n}\n",["70","71"],"/Users/kaybanks/Repository/videoplayer/src/components/playlist.js",[],"/Users/kaybanks/Repository/videoplayer/src/utility/index.js",[],"/Users/kaybanks/Repository/videoplayer/src/utility/startup.js",[],"/Users/kaybanks/Repository/videoplayer/src/utility/youtube.js",["72"],"import { Observable, firstValueFrom } from 'rxjs'\n\nexport default async function getVideoDataFromUrl(url) {\n  const videoId = parseYoutubeUrl(url)\n\n  if (!videoId) return false\n\n  let videoData = await firstValueFrom(getVideoData$(videoId)) // await video data\n\n  console.log(\n    '🚀 ~ file: youtube.js ~ line 12 ~ getVideoDataFromUrl ~ videoData',\n    videoData\n  )\n\n  return videoData\n}\n\nfunction getVideoData$(ytId) {\n  return new Observable(observer => {\n    let embed = document.createElement('iframe')\n\n    embed.setAttribute(\n      'src',\n      `https://www.youtube.com/embed/${ytId}?enablejsapi=1&widgetid=99`\n    )\n    embed.cssText = 'position: absolute; display: none'\n\n    embed.onload = function () {\n      var message = JSON.stringify({\n        event: 'listening',\n        id: 99,\n        channel: 'widget'\n      })\n\n      embed.contentWindow.postMessage(message, 'https://www.youtube.com')\n    }\n\n    function parseData(e) {\n      const { event, id, info } = JSON.parse(e.data)\n\n      // console.log(JSON.parse(e.data))\n      if (event === 'initialDelivery' && id == 99) observer.next(info.videoData)\n    }\n\n    document.body.appendChild(embed) // load iframe\n    window.addEventListener('message', parseData) // add Api listener for initialDelivery\n\n    return function cleanup() {\n      window.removeEventListener('message', parseData)\n      document.body.removeChild(embed)\n    }\n  })\n}\n\nexport function parseYoutubeUrl(url) {\n  var p = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/\n  let urlMatch = url.match(p)\n\n  if (urlMatch) return urlMatch[1]\n\n  return false\n}\n","/Users/kaybanks/Repository/videoplayer/src/utility/seedData.js",[],"/Users/kaybanks/Repository/videoplayer/src/utility/playlistCreator.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"73","replacedBy":"77"},{"ruleId":"75","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":80,"column":10,"nodeType":"81","messageId":"82","endLine":80,"endColumn":25},{"ruleId":"79","severity":1,"message":"83","line":365,"column":8,"nodeType":"81","messageId":"82","endLine":365,"endColumn":18},{"ruleId":"73","replacedBy":"84"},{"ruleId":"75","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":42,"column":45,"nodeType":"88","messageId":"89","endLine":42,"endColumn":47},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],["90"],["91"],"no-unused-vars","'setUpFileUpload' is defined but never used.","Identifier","unusedVar","'totalSplit' is assigned a value but never used.",["90"],["91"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]