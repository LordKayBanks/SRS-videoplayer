import { Range, getTrackBackground, useThumbOverlap } from "react-range";

import React, { useState } from "react";
import { toMinutesSeconds } from "../../utility";

const COLORS = ["#9CBCF8", "#ff0000", "#9CBCF8", "#ccc"];
const THUMB_SIZE = 32;
const MIN = 0;
const RepeatRange = ({ rtl, MAX, STEP, values, handleReviewMode = () => {} }) => {
	const rangeRef = React.useRef();

	const renderGradationMark = ({ props, index }) => (
		<div
			{...props}
			style={{
				...props.style,
				height: "16px",
				width: "5px",
				backgroundColor: index * STEP < values[0] ? "#548BF4" : "#ccc",
			}}
		/>
	);
	const Thumb = ({ props, index, isDragged }) => (
		<div
			{...props}
			style={{
				...props.style,
				height: `${THUMB_SIZE}px`,
				width: `${THUMB_SIZE}px`,
				borderRadius: "4px",
				backgroundColor: "#FFF",
				display: "flex",
				justifyContent: "center",
				alignItems: "center",
				boxShadow: "0px 2px 6px #AAA",
			}}
		>
			<ThumbLabel rangeRef={rangeRef.current} values={values} index={index} />
			<div
				style={{
					height: "16px",
					width: "5px",
					backgroundColor: isDragged ? "#548BF4" : "#CCC",
				}}
			/>
		</div>
	);
	const Track = ({ props, children }) => (
		<div
			onMouseDown={props.onMouseDown}
			onTouchStart={props.onTouchStart}
			style={{
				...props.style,
				height: "36px",
				display: "flex",
				width: "100%",
				marginBottom: "6px",
			}}
		>
			<div
				ref={props.ref}
				style={{
					height: "5px",
					width: "100%",
					borderRadius: "4px",
					background: getTrackBackground({
						values: values,
						colors: COLORS,
						min: MIN,
						max: MAX,
						rtl,
					}),
					alignSelf: "center",
				}}
			>
				{children}
			</div>
		</div>
	);
	return (
		<Range
			ref={rangeRef}
			values={values}
			onChange={(values) => {
				handleReviewMode(values);
			}}
			renderThumb={Thumb}
			renderTrack={Track}
			step={STEP}
			min={MIN}
			max={MAX}
			rtl={rtl}
			renderGradationMark={renderGradationMark}
		/>
	);
};

function ThumbLabel({ rangeRef, values, index }) {
	const [labelValue, labelStyle] = useThumbOverlap(
		rangeRef,
		values,
		index,
		1,
		" - ",
		(value) => `${toMinutesSeconds(value, true)}`
	);
	return (
		<div
			data-label={index}
			style={{
				display: "block",
				position: "absolute",
				top: "-28px",
				color: "#fff",
				fontWeight: "bold",
				fontSize: "14px",
				fontFamily: "Arial,Helvetica Neue,Helvetica,sans-serif",
				padding: "4px",
				borderRadius: "4px",
				backgroundColor: "#548BF4",
				whiteSpace: "nowrap",
				...labelStyle,
			}}
		>
			{labelValue}
		</div>
	);
}

export default RepeatRange;
